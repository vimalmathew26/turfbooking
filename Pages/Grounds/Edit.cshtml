@page
@model turfbooking.Pages.Grounds.EditModel
@{
    ViewData["Title"] = "Edit Ground";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-lg border-0 rounded-4">
                <div class="card-header bg-success text-white rounded-top-4" style="background-color: white;">
                    <h3 class="mb-0">Edit Ground</h3>
                </div>

                <div class="card-body p-4">
                    <form method="post" enctype="multipart/form-data" asp-page-handler="">
                        @Html.AntiForgeryToken()
                        <input type="hidden" asp-for="Ground.Id" />
                        <input type="hidden" asp-for="Ground.PhotoPath" />

                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                        <div class="mb-4 text-center">
                            <label class="form-label d-block fw-semibold">Upload Ground Photo</label>
                            <div class="border rounded-4 p-3 bg-light shadow-sm" style="max-width: 300px; margin: auto;">
                                <img id="photoPreview" src="@(string.IsNullOrEmpty(Model.Ground.PhotoPath) ? "/images/placeholder.png" : Model.Ground.PhotoPath)" class="img-fluid rounded mb-2" style="height: 200px; object-fit: cover;" />
                                <input asp-for="Photo" type="file" class="form-control" accept="image/*" onchange="previewImage(event)" />
                                <span asp-validation-for="Photo" class="text-danger small d-block mt-1"></span>
                                <small class="text-muted">Leave empty to keep current photo</small>
                            </div>
                        </div>

                        <div class="row g-3">
                            <div class="col-md-6">
                                <label asp-for="Ground.GroundName" class="form-label fw-semibold"></label>
                                <input asp-for="Ground.GroundName" class="form-control rounded-3" placeholder="e.g. Sunrise Turf" />
                                <span asp-validation-for="Ground.GroundName" class="text-danger small"></span>
                            </div>

                            <div class="col-md-6">
                                <label asp-for="Ground.Location" class="form-label fw-semibold"></label>
                                <input asp-for="Ground.Location" class="form-control rounded-3" placeholder="e.g. Kochi, Kerala" />
                                <span asp-validation-for="Ground.Location" class="text-danger small"></span>
                            </div>
                        </div>

                        <div class="mt-3">
                            <label asp-for="Ground.Description" class="form-label fw-semibold"></label>
                            <textarea asp-for="Ground.Description" class="form-control rounded-3" rows="3" placeholder="Write a short description..."></textarea>
                            <span asp-validation-for="Ground.Description" class="text-danger small"></span>
                        </div>

                        <div class="row g-3 mt-1">
                            <div class="col-md-6">
                                <label asp-for="Ground.PricePerHour" class="form-label fw-semibold"></label>
                                <input asp-for="Ground.PricePerHour" class="form-control rounded-3" placeholder="e.g. 500" />
                                <span asp-validation-for="Ground.PricePerHour" class="text-danger small"></span>
                            </div>
                        </div>

                        <div class="form-check form-switch mt-4">
                            <input asp-for="Ground.IsActive" class="form-check-input" type="checkbox" role="switch" />
                            <label asp-for="Ground.IsActive" class="form-check-label fw-semibold">Active Ground</label>
                        </div>

                        <div id="courtsContainer">
                            @for (int i = 0; i < Model.Courts.Count; i++)
                            {
                                <div class="court-group border rounded-4 p-3 mb-3 @(i == 0 ? "" : "position-relative")">
                                    <input type="hidden" asp-for="Courts[i].Id" />
                                    <h5 class="fw-semibold d-flex justify-content-between align-items-center">
                                        Court @(i + 1)
                                        @if (i > 0)
                                        {
                                            <button type="button" class="btn-close" onclick="removeCourt(this)" aria-label="Remove"></button>
                                        }
                                    </h5>
                                    <div class="row g-2 align-items-end">
                                        <!-- Dropdown Sport -->
                                        <div class="col-md-3">
                                            <label class="form-label">Select Sport</label>
                                            <div class="position-relative">
                                                <select asp-for="Courts[i].Name" class="form-select court-sport-select" onchange="handleSportSelectChange(this)" required>
                                                    <option value="">-- Choose Sport --</option>
                                                    <option value="Football">Football</option>
                                                    <option value="Cricket">Cricket</option>
                                                    <option value="Badminton">Badminton</option>
                                                    <option value="Volleyball">Volleyball</option>
                                                    <option value="Tennis">Tennis</option>
                                                    <option value="Basketball">Basketball</option>
                                                    <option value="Hockey">Hockey</option>
                                                    <option value="Kabaddi">Kabaddi</option>
                                                    <option value="Table Tennis">Table Tennis</option>
                                                    <option value="Kho-Kho">Kho-Kho</option>
                                                    <option value="__other__">Other</option>
                                                </select>
                                                <input type="text" class="form-control mt-2 @(Model.IsCustomSport(Model.Courts[i].Name) ? "" : "d-none") court-custom-sport" placeholder="Enter custom sport" value="@(Model.IsCustomSport(Model.Courts[i].Name) ? Model.Courts[i].Name : "")" />
                                            </div>
                                        </div>

                                        <!-- Duration -->
                                        <div class="col-md-3">
                                            <label class="form-label">Duration</label>
                                            <div class="d-flex gap-2">
                                                <!-- Hours -->
                                                <div class="input-group" style="width: 100px;">
                                                    <input asp-for="Courts[i].DurationHours" type="number" min="0" max="12" class="form-control text-center" placeholder="hrs" required />
                                                    <span class="input-group-text">h</span>
                                                </div>

                                                <!-- Minutes -->
                                                <div class="input-group" style="width: 100px;">
                                                    <input asp-for="Courts[i].DurationMinutes" type="number" min="0" max="59" class="form-control text-center" placeholder="mins" required />
                                                    <span class="input-group-text">m</span>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Start Time -->
                                        <div class="col-md-3">
                                            <label class="form-label">Start Time</label>
                                            <input asp-for="Courts[i].StartTime" type="time" class="form-control" style="min-width: 140px;" required />
                                        </div>

                                        <!-- End Time -->
                                        <div class="col-md-3">
                                            <label class="form-label">End Time</label>
                                            <input asp-for="Courts[i].EndTime" type="time" class="form-control" style="min-width: 140px;" required />
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <button type="button" class="btn btn-outline-primary mt-2" onclick="addCourt()">+ Add Court</button>

                        <div class="text-end mt-4">
                            <a asp-page="/Grounds/Index" class="btn btn-secondary rounded-pill px-4 shadow-sm me-2">
                                <i class="bi bi-arrow-left me-1"></i> Cancel
                            </a>
                            <button type="submit" class="btn btn-primary rounded-pill px-4 shadow-sm">
                                <i class="bi bi-check-circle me-1"></i> Update Ground
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        body {
            margin: 0;
            padding: 0;
            background: url('/images/turfbg.jpg') no-repeat center center fixed;
            background-size: cover;
            font-family: 'Segoe UI', sans-serif;
        }

        .form-container {
            padding: 10px;
            border-radius: 20px;
            background-color: rgba(255, 255, 255, 0.85);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        }

        .form-label {
            font-weight: 600;
        }

        .form-control {
            border-radius: 10px;
        }

        .btn-purple {
            background-color: white;
            color: white;
            border: none;
        }

            .btn-purple:hover {
                background-color: white;
            }

        .minutes-box {
            width: 60px !important;
            flex: 0 0 auto !important;
        }

        .hours-box {
            width: 60px !important;
            flex: 0 0 auto !important;
        }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        function previewImage(event) {
            const reader = new FileReader();
            reader.onload = function () {
                const output = document.getElementById('photoPreview');
                output.src = reader.result;
            };
            reader.readAsDataURL(event.target.files[0]);
        }

        function addCourt() {
            const container = document.getElementById("courtsContainer");
            const index = document.querySelectorAll('.court-group').length;

            const div = document.createElement("div");
            div.className = "court-group border rounded-4 p-3 mb-3 position-relative";

            div.innerHTML = `
                <input type="hidden" name="Courts[${index}].Id" value="0" />
                <h5 class="fw-semibold">Court ${index + 1}</h5>
                <button type="button" class="btn-close position-absolute top-0 end-0 m-3" onclick="removeCourt(this)" aria-label="Remove"></button>
                <div class="row g-2 align-items-end">
                    <div class="col-md-3">
                        <label class="form-label">Select Sport</label>
                        <div class="position-relative">
                            <select name="Courts[${index}].Name" class="form-select court-sport-select" onchange="handleSportSelectChange(this)" required>
                                <option value="">-- Choose Sport --</option>
                                <option value="Football">Football</option>
                                <option value="Cricket">Cricket</option>
                                <option value="Badminton">Badminton</option>
                                <option value="Volleyball">Volleyball</option>
                                <option value="Tennis">Tennis</option>
                                <option value="Basketball">Basketball</option>
                                <option value="Hockey">Hockey</option>
                                <option value="Kabaddi">Kabaddi</option>
                                <option value="Table Tennis">Table Tennis</option>
                                <option value="Kho-Kho">Kho-Kho</option>
                                <option value="__other__">Other</option>
                            </select>
                            <input type="text" class="form-control mt-2 d-none court-custom-sport" placeholder="Enter custom sport" />
                        </div>
                    </div>

                    <div class="col-md-3">
                        <label class="form-label">Duration</label>
                        <div class="d-flex gap-2">
                            <div class="input-group" style="width: 100px;">
                                <input name="Courts[${index}].DurationHours" type="number" min="0" max="12" class="form-control text-center" placeholder="hrs" value="1" required />
                                <span class="input-group-text">h</span>
                            </div>
                            <div class="input-group" style="width: 100px;">
                                <input name="Courts[${index}].DurationMinutes" type="number" min="0" max="59" class="form-control text-center" placeholder="mins" value="0" required />
                                <span class="input-group-text">m</span>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <label class="form-label">Start Time</label>
                        <input name="Courts[${index}].StartTime" type="time" class="form-control" style="min-width: 140px;" required />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">End Time</label>
                        <input name="Courts[${index}].EndTime" type="time" class="form-control" style="min-width: 140px;" required />
                    </div>
                </div>
            `;

            container.appendChild(div);
        }

        function reindexCourts() {
            const courtGroups = document.querySelectorAll('#courtsContainer .court-group');
            courtGroups.forEach((group, index) => {
                group.querySelector('h5').innerText = `Court ${index + 1}`;

                const hiddenId = group.querySelector('input[type="hidden"]');
                const select = group.querySelector('select');
                const inputs = group.querySelectorAll('input[type="number"], input[type="time"]');

                if (hiddenId) hiddenId.name = `Courts[${index}].Id`;
                if (select) select.name = `Courts[${index}].Name`;

                if (inputs.length >= 4) {
                    inputs[0].name = `Courts[${index}].DurationHours`;
                    inputs[1].name = `Courts[${index}].DurationMinutes`;
                    inputs[2].name = `Courts[${index}].StartTime`;
                    inputs[3].name = `Courts[${index}].EndTime`;
                }
            });
        }

        function removeCourt(button) {
            const courtGroups = document.querySelectorAll('.court-group');
            if (courtGroups.length <= 1) {
                alert("At least one court is required.");
                return;
            }
            const courtDiv = button.closest('.court-group');
            courtDiv.remove();
            reindexCourts();
        }

        function handleSportSelectChange(selectEl) {
            const wrapper = selectEl.closest('.col-md-3');
            const customInput = wrapper.querySelector('.court-custom-sport');

            if (selectEl.value === "__other__") {
                customInput.classList.remove('d-none');
                customInput.setAttribute('required', 'required');

                customInput.addEventListener('input', function () {
                    selectEl.value = this.value;
                });
            } else {
                customInput.classList.add('d-none');
                customInput.removeAttribute('required');
                customInput.value = "";
            }
        }

        // Initialize custom sport handling on page load
        document.addEventListener('DOMContentLoaded', function() {
            const sportSelects = document.querySelectorAll('.court-sport-select');
            sportSelects.forEach(select => {
                const wrapper = select.closest('.col-md-3');
                const customInput = wrapper.querySelector('.court-custom-sport');

                if (!customInput.classList.contains('d-none')) {
                    select.value = "__other__";
                    customInput.setAttribute('required', 'required');

                    customInput.addEventListener('input', function () {
                        select.value = this.value;
                    });
                }
            });
        });
    </script>
}